


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: Jaxon Coward, Erick I. Cortez Valdez
    3 00000000         ; Last modification date: 4/10/2020
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           ST7735_OutChar
   13 00000000                 IMPORT           ST7735_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000         
   17 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   18 00000000                 THUMB
   19 00000000         ;C Code of the recursion function LCD_OutDec in which th
                       e assembly function was based on
   20 00000000         ; void LCD_OutDec1(uint32_t n){
   21 00000000         ;    char num;
   22 00000000         ;    if(n < 10){
   23 00000000         ;   ST7735_OutChar('0' + n);
   24 00000000         ;        return;
   25 00000000         ;    }
   26 00000000         ;    num = ('0' + (n%10));
   27 00000000         ;    LCD_OutDec1(n/10);
   28 00000000         ;  ST7735_OutChar(num);
   29 00000000         ;} 
   30 00000000         
   31 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   32 00000000         ; Output a 32-bit number in unsigned decimal format
   33 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   34 00000000         ; Output: none
   35 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   36 00000000         ; Lab 7 requirement is for at least one local variable o
                       n the stack with symbolic binding
   37 00000000 00000000 
                       charnum EQU              0
   38 00000000         
   39 00000000         LCD_OutDec
   40 00000000 B510            PUSH{R4,         LR}
   41 00000002         ;Base Case
   42 00000002 280A            CMP              R0, #10     ;If n < 10, we retu
                                                            rn and do the last 
                                                            case
   43 00000004 D316            BLO              return
   44 00000006         ;modulo operation n % 10
   45 00000006 F04F 010A       MOV              R1, #10     ;We'll use R1 = 10 
                                                            for the modulo oper
                                                            atio
   46 0000000A FBB0 F3F1       UDIV             R3, R0, R1  ; R3 = n / 10
   47 0000000E FB03 F201       MUL              R2, R3, R1  ;R2 = (n/10) * 10



ARM Macro Assembler    Page 2 


   48 00000012 EBA0 0202       SUB              R2, R0, R2  ;R2 = n % 10
   49 00000016         ;At this point R2 = n % 10
   50 00000016 F102 0230       ADD              R2, #'0'    ;Converting result 
                                                            in R2 to ASCII char
                                                            
   51 0000001A 4610            MOV              R0, R2
   52 0000001C         ;Pushing into the stack n
   53 0000001C B082            SUB              SP, #8      ;Making enough spac
                                                            e for two registers
                                                            , just to even the 
                                                            stack
   54 0000001E 9000            STR              R0, [SP, #charnum]
   55 00000020 4618            MOV              R0, R3      ;Moving R3 = n / 10
                                                             into R0
   56 00000022 F7FF FFFE       BL               LCD_OutDec  ;Recursion
   57 00000026         ;After coming back from recursion we pop registers out o
                       f the stack and print them
   58 00000026 9800            LDR              R0, [SP, #charnum]
   59 00000028 B002            ADD              SP, #8
   60 0000002A F7FF FFFE       BL               ST7735_OutChar
   61 0000002E         ;We return now
   62 0000002E E8BD 4010       POP{R4,          LR}
   63 00000032 4770            BX               LR
   64 00000034         return
   65 00000034 F100 0030       ADD              R0, #'0'    ;Adding '0' to n ju
                                                            st to convert it in
                                                            to an ASCII char
   66 00000038 F7FF FFFE       BL               ST7735_OutChar
   67 0000003C E8BD 4010       POP{R4,          LR}
   68 00000040 4770            BX               LR
   69 00000042         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   70 00000042         
   71 00000042         ; -----------------------LCD _OutFix--------------------
                       --
   72 00000042         ; Output characters to LCD display in fixed-point format
                       
   73 00000042         ; unsigned decimal, resolution 0.01, range 0.00 to 9.99
   74 00000042         ; Inputs:  R0 is an unsigned 32-bit number
   75 00000042         ; Outputs: none
   76 00000042         ; E.g., R0=0,    then output "0.00 "
   77 00000042         ;       R0=3,    then output "0.03 "
   78 00000042         ;       R0=89,   then output "0.89 "
   79 00000042         ;       R0=123,  then output "1.23 "
   80 00000042         ;       R0=999,  then output "9.99 "
   81 00000042         ;       R0>999,  then output "*.** "
   82 00000042         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   83 00000042         ; Lab 7 requirement is for at least one local variable o
                       n the stack with symbolic binding
   84 00000042 00000000 
                       digit0  EQU              0
   85 00000042 00000004 
                       digit1  EQU              4
   86 00000042         
   87 00000042         LCD_OutFix
   88 00000042 B510            PUSH{R4,LR}
   89 00000044 F240 31E7       MOV              R1,#999
   90 00000048 4288            CMP              R0,R1
   91 0000004A D82D            BHI              input_error



ARM Macro Assembler    Page 3 


   92 0000004C         
   93 0000004C B082            SUB              SP,#8       ;allocate 2 local v
                                                            ariables
   94 0000004E         
   95 0000004E F04F 010A       MOV              R1,#10
   96 00000052         
   97 00000052 FBB0 F2F1       UDIV             R2,R0,R1    ;R2 is R0/10
   98 00000056 FB02 F301       MUL              R3,R2,R1
   99 0000005A EBA0 0303       SUB              R3,R0,R3    ;R3 is R0 % 10, whi
                                                            ch is the first dig
                                                            it
  100 0000005E 9300            STR              R3,[SP,#digit0] ;store the firs
                                                            t digit
  101 00000060         
  102 00000060 4610            MOV              R0,R2       ;we have the first 
                                                            digit, divide by te
                                                            n to shift it out
  103 00000062         
  104 00000062 FBB0 F2F1       UDIV             R2,R0,R1    ;R2 is R0/100
  105 00000066 FB02 F301       MUL              R3,R2,R1
  106 0000006A EBA0 0303       SUB              R3,R0,R3    ;R3 is R0 % 10;R3 i
                                                            s R0 % 10, which is
                                                             the second digit
  107 0000006E 9301            STR              R3,[SP,#digit1] ;store the seco
                                                            nd digit
  108 00000070         
  109 00000070 4610            MOV              R0,R2       ;we have the second
                                                             digit, divide by t
                                                            en to shift it out
  110 00000072         
  111 00000072 FBB0 F2F1       UDIV             R2,R0,R1    ;R2 is R0/1000
  112 00000076 FB02 F301       MUL              R3,R2,R1
  113 0000007A EBA0 0303       SUB              R3,R0,R3    ;R3 is now the 3rd 
                                                            digit
  114 0000007E         
  115 0000007E         ;begin output
  116 0000007E 4618            MOV              R0, R3
  117 00000080 F100 0030       ADD              R0,#'0'
  118 00000084 F7FF FFFE       BL               ST7735_OutChar
  119 00000088 F04F 002E       MOV              R0, #'.'
  120 0000008C F7FF FFFE       BL               ST7735_OutChar
  121 00000090 9801            LDR              R0,[SP,#digit1]
  122 00000092 F100 0030       ADD              R0,#'0'
  123 00000096 F7FF FFFE       BL               ST7735_OutChar
  124 0000009A 9800            LDR              R0,[SP,#digit0]
  125 0000009C F100 0030       ADD              R0,#'0'
  126 000000A0 F7FF FFFE       BL               ST7735_OutChar
  127 000000A4         
  128 000000A4         
  129 000000A4 B002            ADD              SP,#8       ;deallocate local v
                                                            ariables
  130 000000A6 BD10            POP              {R4,PC}
  131 000000A8         
  132 000000A8         input_error
  133 000000A8 F04F 002A       MOV              R0, #'*'
  134 000000AC F7FF FFFE       BL               ST7735_OutChar
  135 000000B0 F04F 002E       MOV              R0, #'.'
  136 000000B4 F7FF FFFE       BL               ST7735_OutChar
  137 000000B8 F04F 002A       MOV              R0, #'*'



ARM Macro Assembler    Page 4 


  138 000000BC F7FF FFFE       BL               ST7735_OutChar
  139 000000C0 F04F 002A       MOV              R0, #'*'
  140 000000C4 F7FF FFFE       BL               ST7735_OutChar
  141 000000C8         
  142 000000C8 BD10            POP              {R4,PC}
  143 000000CA         
  144 000000CA 00 00           ALIGN
  145 000000CC         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  146 000000CC         
  147 000000CC                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  148 000000CC                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\print.d -o.\print.o -I.\RTE\_Lab_10 -IC:\Users\Fred8\AppData\Loc
al\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\Users\Fred8\AppData\Local\
Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1
" --predefine="__UVISION_VERSION SETA 529" --predefine="_RTE_ SETA 1" --predefi
ne="TM4C123GH6PM SETA 1" --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 17 in file Print.s
   Uses
      None
Comment: .text unused
LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 39 in file Print.s
   Uses
      At line 14 in file Print.s
      At line 56 in file Print.s

LCD_OutFix 00000042

Symbol: LCD_OutFix
   Definitions
      At line 87 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutFix used once
input_error 000000A8

Symbol: input_error
   Definitions
      At line 132 in file Print.s
   Uses
      At line 91 in file Print.s
Comment: input_error used once
return 00000034

Symbol: return
   Definitions
      At line 64 in file Print.s
   Uses
      At line 43 in file Print.s
Comment: return used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

charnum 00000000

Symbol: charnum
   Definitions
      At line 37 in file Print.s
   Uses
      At line 54 in file Print.s
      At line 58 in file Print.s

digit0 00000000

Symbol: digit0
   Definitions
      At line 84 in file Print.s
   Uses
      At line 100 in file Print.s
      At line 124 in file Print.s

digit1 00000004

Symbol: digit1
   Definitions
      At line 85 in file Print.s
   Uses
      At line 107 in file Print.s
      At line 121 in file Print.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 12 in file Print.s
   Uses
      At line 60 in file Print.s
      At line 66 in file Print.s
      At line 118 in file Print.s
      At line 120 in file Print.s
      At line 123 in file Print.s
      At line 126 in file Print.s
      At line 134 in file Print.s
      At line 136 in file Print.s
      At line 138 in file Print.s
      At line 140 in file Print.s

ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 13 in file Print.s
   Uses
      None
Comment: ST7735_OutString unused
2 symbols
344 symbols in table
